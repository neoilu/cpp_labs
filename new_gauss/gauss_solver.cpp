#include "gauss_solver.h"
#include <iostream>
#include <cmath>
#include <iomanip>

const double EPSILON = 1e-9;  // –ü–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–æ–ª—å

void gauss(int size, double** matrix, double* vector) {
    double** originalMatrix = new double*[size]; // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
    for (int i = 0; i < size; i++) {
        originalMatrix[i] = new double[size];
        for (int j = 0; j < size; j++) {
            originalMatrix[i][j] = matrix[i][j];
        }
    }

    double* originalVector = new double[size];
    for (int i = 0; i < size; i++) {
        originalVector[i] = vector[i];
    }

    for (int i = 0; i < size; i++) {
        // üîπ **–®–∞–≥ 1: –ü–æ–∏—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ**
        int pivot = i;
        for (int k = i + 1; k < size; k++) {
            if (std::fabs(matrix[k][i]) > std::fabs(matrix[pivot][i])) {
                pivot = k;
            }
        }

        // üîπ **–®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ä–æ–∂–¥–µ–Ω–Ω–æ—Å—Ç—å –º–∞—Ç—Ä–∏—Ü—ã**
        if (std::fabs(matrix[pivot][i]) < EPSILON) {
            std::cout << "–û—à–∏–±–∫–∞: –°–õ–ê–£ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–Ω–∞ –∏–ª–∏ –∏–º–µ–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –º–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏–π" << std::endl;
            return;
        }

        // üîπ **–®–∞–≥ 3: –û–±–º–µ–Ω —Å—Ç—Ä–æ–∫–∞–º–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ**
        if (i != pivot) {
            std::swap(matrix[i], matrix[pivot]);
            std::swap(vector[i], vector[pivot]);
        }

        // üîπ **–®–∞–≥ 4: –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫ 1**
        double lead = matrix[i][i];
        for (int j = i; j < size; j++) {
            matrix[i][j] /= lead;
        }
        vector[i] /= lead;

        // üîπ **–®–∞–≥ 5: –û–±–Ω—É–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–¥ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª—å—é**
        for (int k = i + 1; k < size; k++) {
            double factor = matrix[k][i];
            for (int j = i; j < size; j++) {
                matrix[k][j] -= factor * matrix[i][j];
            }
            vector[k] -= factor * vector[i];
        }
    }

    // üîπ **–®–∞–≥ 6: –û–±—Ä–∞—Ç–Ω—ã–π —Ö–æ–¥ (–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π)**
    double* solution = new double[size];

    for (int i = size - 1; i >= 0; i--) {
        solution[i] = vector[i];
        for (int j = i + 1; j < size; j++) {
            solution[i] -= matrix[i][j] * solution[j];
        }
    }

    // üîπ **–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞**
    std::cout << "–†–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:" << std::endl;
    for (int i = 0; i < size; i++) {
        std::cout << "x[" << i + 1 << "] = " << std::fixed << std::setprecision(6) << solution[i] << std::endl;
    }

    // üîπ **–®–∞–≥ 7: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –≤–µ–∫—Ç–æ—Ä–∞ –Ω–µ–≤—è–∑–∫–∏**
    double* residual = new double[size];
    for (int i = 0; i < size; i++) {
        residual[i] = originalVector[i];
        for (int j = 0; j < size; j++) {
            residual[i] -= originalMatrix[i][j] * solution[j];
        }
    }

    std::cout << "\n–í–µ–∫—Ç–æ—Ä –Ω–µ–≤—è–∑–∫–∏:" << std::endl;
    for (int i = 0; i < size; i++) {
        std::cout << "r[" << i + 1 << "] = " << std::scientific << std::setprecision(6) << residual[i] << std::endl;
    }

    // üîπ **–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏**
    delete[] solution;
    delete[] residual;
    delete[] originalVector;
    for (int i = 0; i < size; i++) {
        delete[] originalMatrix[i];
    }
    delete[] originalMatrix;
}
